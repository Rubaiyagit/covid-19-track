{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","map","i","class","className","src","countryInfo","flag","alt","cases","deaths","recovered","todayCases","todayDeath","active","critical","CardDeck","Card","bg","text","classname","style","margin","Body","Title","Text","Footer","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fd42f2f.chunk.js","sourcesContent":["\nimport React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from \"react-bootstrap/CardDeck\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\"\nfunction App() {\n  const[latest,setLatest]= useState(\"\");\n  const[results,setResults]=useState([]);\n  const [searchCountry,setSearchCountry]=useState(\"\");\n\n  useEffect(() => {\n    axios\n    .all([\n     axios.get (\"https://corona.lmao.ninja/v3/covid-19/all\"),\n    axios.get(\"https://corona.lmao.ninja/v3/covid-19/countries\")\n  ])\n    .then(responseArr=>{\n      setLatest(responseArr[0].data);\n      setResults(responseArr[1].data);\n    })\n    .catch(err=>{\n      console.log(err);\n    });\n  },[]);\n  const date= new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n  const filterCountry= results.filter(item=>{\n    return searchCountry !==\"\"? item.country === searchCountry : item;\n  });\n  const countries = filterCountry.map((data,i)=>{\n    return(\n      <div class=\"container-fluid\" class=\"card-horizontal\" class=\"img-square-wrapper\">\n      \n        <div className=\"container-fluid\">\n          <div className=\"row\">\n              <div className=\"col-12 mt-1\">\n                  <div className=\"card\">\n                  <div class=\"card-header\">\n                    {data.country}\n                  </div>\n                      <div className=\"card-horizontal\">\n                          <div className=\"img--wrapper\">\n                              <img className=\"flags\" src={data.countryInfo.flag} alt=\"Card image cap\"></img>\n                          </div>\n                      <div className=\"card-body\">\n                      \n                        <p class=\"card-text\">\n                          <ul>\n                            <li>Cases - {data.cases}</li>\n                            <li>Deaths - {data.deaths}</li>\n                            <li>recovered - {data.recovered}</li>\n                            <li>Today's cases - {data.todayCases}</li>\n                            <li>Today's death - {data.todayDeath}</li>\n                            <li>Active - {data.active}</li>\n                            <li>Critical - {data.critical}</li>\n                          </ul>\n                        </p>\n                          </div>\n                    </div>\n                    \n                </div>\n            </div>\n        </div>\n    </div>\n     \n      </div>\n    );\n  });\n  var queries = [{\n    columns: 1,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  return (\n    <div className=\"App\">\n     <CardDeck>\n  <Card bg=\"secondary\" text={\"white\"} classname=\"text-center\" style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>{latest.cases}</Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small >Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text={\"white\"} classname=\"text-center\" style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title>Death</Card.Title>\n      <Card.Text>{latest.deaths}</Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" text={\"white\"} classname=\"text-center\" style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>{latest.recovered}</Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Label>Search</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Search a country\"\n      onChange={e=>setSearchCountry(e.target.value)}\n    />\n  </Form.Group>\n</Form>\n<Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}